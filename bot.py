from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from logic import DatabaseManager
import schedule
import threading
import time
import os
import sqlite3
from config import API_TOKEN, DATABASE

bot = TeleBot(API_TOKEN)
manager = DatabaseManager(DATABASE)

def check_prizes_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã"""
    conn = sqlite3.connect(DATABASE)
    with conn:
        cur = conn.cursor()
        cur.execute('SELECT COUNT(*) FROM prizes WHERE used = 0')
        return cur.fetchone()[0] > 0

def gen_markup(prize_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å!' –¥–ª—è –ø—Ä–∏–∑–∞"""
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å!", callback_data=str(prize_id)))
    return markup

def send_message():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã
        prize = manager.get_random_prize()
        if not prize:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤!")
            return
            
        prize_id, img_name = prize[:2]
        print(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∑ {prize_id}: {img_name}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        hidden_img_path = os.path.join('hidden_img', img_name)
        if not os.path.exists(hidden_img_path):
            print(f"–§–∞–π–ª {hidden_img_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = manager.get_users()
        if not users:
            print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
            return
            
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {img_name} {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        for user_id in users:
            try:
                with open(hidden_img_path, 'rb') as photo:
                    bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption="–£–≥–∞–¥–∞–π, —á—Ç–æ —ç—Ç–æ?",
                        reply_markup=gen_markup(prize_id)
                    )
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                
        print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(users)}")
        manager.mark_prize_used(prize_id)
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_message: {str(e)}")

def schedule_thread():
    schedule.every(5).seconds.do(send_message)  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
    while True:
        schedule.run_pending()
        time.sleep(1)

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    if user_id in manager.get_users():
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        manager.add_user(user_id, message.from_user.username)
        bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–¢–µ–±—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏!
–ö–∞–∂–¥—ã–π —á–∞—Å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç —à–∞–Ω—Å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!
–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å!'

–¢–æ–ª—å–∫–æ —Ç—Ä–∏ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É!)""")

@bot.message_handler(commands=['rating'])
def handle_rating(message):
    res = manager.get_rating() 
    res = [f'| @{x[1]:<11} | {x[2]:<11}|' for x in res]
    res = '\n'.join(res)
    res = f'|USER_NAME    |COUNT_PRIZE|\n{"_"*26}\n' + res
    bot.send_message(message.chat.id, res)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    try:
        prize_id = call.data
        user_id = call.from_user.id
        
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –ø—Ä–∏–∑ {prize_id}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners_count = manager.get_winners_count(prize_id)
        if winners_count >= 3:
            bot.answer_callback_query(
                call.id,
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –∫–æ–ø–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–∏–∑–∞ —É–∂–µ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã!",
                show_alert=True
            )
            return
            
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if manager.add_winner(user_id, prize_id):
            img = manager.get_prize_img(prize_id)
            if img and os.path.exists(f'img/{img}'):
                with open(f'img/{img}', 'rb') as photo:
                    bot.send_photo(
                        user_id,
                        photo,
                        caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª —ç—Ç–æ—Ç –ø—Ä–∏–∑! üéâ"
                    )
                bot.answer_callback_query(call.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø—Ä–∏–∑–∞!")
            else:
                bot.answer_callback_query(
                    call.id,
                    text="–û—à–∏–±–∫–∞: –ø—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    show_alert=True
                )
        else:
            bot.answer_callback_query(
                call.id,
                text="–¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —ç—Ç–æ—Ç –ø—Ä–∏–∑!",
                show_alert=True
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {str(e)}")
        bot.answer_callback_query(
            call.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            show_alert=True
        )

def polling_thread():
    bot.infinity_polling()

if __name__ == '__main__':
    manager.create_tables()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–æ–≤
    prizes_img = [f for f in os.listdir('img') if f.endswith(('.jpg', '.png', '.jpeg'))]
    if prizes_img:
        print(f"–ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prizes_img}")
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–∑—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        conn = sqlite3.connect(DATABASE)
        with conn:
            conn.execute('DELETE FROM prizes')
            conn.executemany('INSERT INTO prizes (image, used) VALUES (?, 0)', [(img,) for img in prizes_img])
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(prizes_img)} –ø—Ä–∏–∑–æ–≤ –≤ –±–∞–∑—É")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–µ –≤–µ—Ä—Å–∏–∏
        for img in prizes_img:
            manager.hide_img(img)
    else:
        print("–û—à–∏–±–∫–∞: –í –ø–∞–ø–∫–µ 'img' –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")

    polling_thread = threading.Thread(target=polling_thread)
    schedule_thread = threading.Thread(target=schedule_thread)

    polling_thread.start()
    schedule_thread.start()
